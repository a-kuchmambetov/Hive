#!/bin/bash

# Check if argument is provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <number_of_integers> [min_value] [max_value] [--test] [--show-operations]"
    echo "  number_of_integers: How many numbers to generate"
    echo "  min_value: Minimum value (default: -1000)"
    echo "  max_value: Maximum value (default: 1000)"
    echo "  --test: Run push_swap test after generation"
    echo "  --show-operations: Display the operations generated by push_swap"
    echo ""
    echo "Examples:"
    echo "  $0 5                    # Generate 5 numbers between -1000 and 1000"
    echo "  $0 10 1 100             # Generate 10 numbers between 1 and 100"
    echo "  $0 5 --test             # Generate 5 numbers and test with push_swap"
    echo "  $0 10 1 100 --test      # Generate 10 numbers between 1 and 100 and test"
    echo "  $0 5 --test --show-operations  # Generate, test, and show operations"
    exit 1
fi

# Default values
COUNT=$1
MIN_VAL=-1000
MAX_VAL=1000
TEST_MODE=false
SHOW_OPERATIONS=false

# Parse arguments
for arg in "$@"; do
    if [ "$arg" = "--test" ]; then
        TEST_MODE=true
    elif [ "$arg" = "--show-operations" ]; then
        SHOW_OPERATIONS=true
    fi
done

# Parse positional arguments (skip flags)
POSITIONAL=()
for arg in "$@"; do
    if [ "$arg" != "--test" ] && [ "$arg" != "--show-operations" ]; then
        POSITIONAL+=("$arg")
    fi
done

# Set positional parameters
if [ ${#POSITIONAL[@]} -ge 2 ]; then
    MIN_VAL=${POSITIONAL[1]}
    if [ ${#POSITIONAL[@]} -ge 3 ]; then
        MAX_VAL=${POSITIONAL[2]}
    fi
fi

# Validate input
if ! [[ "$COUNT" =~ ^[0-9]+$ ]] || [ "$COUNT" -le 0 ]; then
    echo "Error: Number of integers must be a positive integer"
    exit 1
fi

# Validate range
if [ "$MIN_VAL" -gt "$MAX_VAL" ]; then
    echo "Error: Minimum value ($MIN_VAL) cannot be greater than maximum value ($MAX_VAL)"
    exit 1
fi

# Check if range is sufficient for the requested count
RANGE=$((MAX_VAL - MIN_VAL + 1))
if [ "$COUNT" -gt "$RANGE" ]; then
    echo "Error: Cannot generate $COUNT unique numbers in range [$MIN_VAL, $MAX_VAL]"
    echo "Range only contains $RANGE possible values"
    exit 1
fi

echo "Generating $COUNT unique random numbers between $MIN_VAL and $MAX_VAL..."

# Generate unique random numbers
NUMBERS=()
ATTEMPTS=0
MAX_ATTEMPTS=$((COUNT * 100))  # Prevent infinite loops

while [ ${#NUMBERS[@]} -lt $COUNT ] && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
    # Generate random number in range
    RANDOM_NUM=$((RANDOM % (MAX_VAL - MIN_VAL + 1) + MIN_VAL))
    ATTEMPTS=$((ATTEMPTS + 1))
    
    # Check if number already exists
    DUPLICATE=false
    for existing in "${NUMBERS[@]}"; do
        if [ "$existing" -eq "$RANDOM_NUM" ]; then
            DUPLICATE=true
            break
        fi
    done
    
    # Add if not duplicate
    if [ "$DUPLICATE" = false ]; then
        NUMBERS+=($RANDOM_NUM)
    fi
done

# Check if we successfully generated enough numbers
if [ ${#NUMBERS[@]} -lt $COUNT ]; then
    echo "Error: Failed to generate $COUNT unique numbers after $MAX_ATTEMPTS attempts"
    echo "This might indicate an issue with the random number generator"
    exit 1
fi

# Convert array to space-separated string
ARG="${NUMBERS[*]}"

echo "Generated numbers: $ARG"

# Test with push_swap if requested
if [ "$TEST_MODE" = true ]; then
    echo ""
    echo "Testing with push_swap..."
    echo "----------------------------------------"
    
    # Check if push_swap executable exists
    if [ ! -f "./push_swap" ]; then
        echo "Error: push_swap executable not found in current directory"
        echo "Make sure you're running this script from the push_swap directory"
        exit 1
    fi
    
    # Count the number of operations
    echo "Running: ./push_swap $ARG"
    OPERATIONS=$(./push_swap $ARG 2>&1)
    
    if [ $? -ne 0 ]; then
        echo "Error: push_swap failed to execute"
        echo "Output: $OPERATIONS"
        exit 1
    fi
    
    OPERATION_COUNT=$(echo "$OPERATIONS" | wc -l)
    echo "Number of operations: $OPERATION_COUNT"
    
    if [ "$SHOW_OPERATIONS" = true ]; then
        echo ""
        echo "Operations generated:"
        echo "$OPERATIONS"
    fi
    
    echo ""
    
    # Check if the sorting is correct
    echo "Checker result:"
    if [ -f "./checker_linux" ]; then
        CHECKER_RESULT=$(echo "$OPERATIONS" | ./checker_linux $ARG 2>&1)
        echo "$CHECKER_RESULT"
        
        if [ "$CHECKER_RESULT" = "OK" ]; then
            echo "✓ Sorting is correct!"
        elif [ "$CHECKER_RESULT" = "KO" ]; then
            echo "✗ Sorting failed - the array is not properly sorted"
        else
            echo "⚠ Unexpected checker output: $CHECKER_RESULT"
        fi
    else
        echo "Warning: checker_linux not found, skipping validation"
    fi
    
    echo ""
    echo "Test completed."
else
    echo ""
    echo "To test these numbers with push_swap, run:"
    echo "./test_push_swap.sh \"$ARG\""
fi
